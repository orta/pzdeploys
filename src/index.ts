import { app, BrowserWindow, ipcMain, Tray, Menu, shell } from 'electron';
import keytar from 'keytar';
import path from 'path';
import { RenderDeploy, RenderPoller } from './renderPoller';
import { VercelPoller } from './vercelPoller';
import { Service } from '@llimllib/renderapi';


// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let tray: Tray | null = null;

const renderPoller = new RenderPoller();
const vercelPoller = new VercelPoller();

type VercelDeploy = {
  name: string;
  id: string;
  inspectorUrl: string;
  creator: { username: string };
  meta: { githubCommitMessage: string, githubCommitOrg: string, githubCommitRepo: string, githubCommitSha: string };
};

// Combine both render and vercel deploys in the menu
function updateTrayMenu(renderDeploys: { service: Service, deploy: RenderDeploy["deploy"] }[] = [], vercelDeploys: VercelDeploy[] = []) {
  if (!tray) return;

  const menuTemplate: Electron.MenuItemConstructorOptions[] = [];

  // Add Render.com deploys
  if (renderDeploys.length > 0) {
    menuTemplate.push({ label: 'Render Deploys', enabled: false });
    renderDeploys.forEach(deploy => {
      const message = typeof deploy.deploy.commit === 'string' ? deploy.deploy.commit : deploy.deploy.commit?.message;
      menuTemplate.push({
        label: `${deploy.service.name} - ${message}`,
        submenu: [
          { 
            label: 'Open in Render',
            click: () => {
              shell.openExternal(`https://dashboard.render.com/web/${deploy.service.id}/deploys/${deploy.deploy.id}`);
            }
          }
        ]
      });
    });
  }

  // Add Vercel deploys
  if (vercelDeploys.length > 0) {
    if (renderDeploys.length > 0) menuTemplate.push({ type: 'separator' });
    menuTemplate.push({ label: 'Vercel Deploys', enabled: false });
    vercelDeploys.forEach(deploy => {
      console.log(deploy);
      menuTemplate.push({
        label: `${deploy.name} - ${deploy.meta?.githubCommitMessage || 'No message'}`,
        submenu: [
          { 
            label: 'Open in Vercel',
            click: () => {
              shell.openExternal(deploy.inspectorUrl);
            }
          },
          {
            label: 'Open in GitHub',
            click: () => {
              shell.openExternal(`https://github.com/${deploy.meta.githubCommitOrg}/${deploy.meta.githubCommitRepo}/commit/${deploy.meta.githubCommitSha}`);
            }
          }
        ]
      });
    });
  }

  // Show "no deploys" if neither has active deploys
  if (menuTemplate.length === 0) {
    menuTemplate.push({ label: 'No active deploys', enabled: false });
  }

  // Add quit option
  menuTemplate.push(
    { type: 'separator' },
    { label: 'Quit', click: () => app.quit() }
  );

  const contextMenu = Menu.buildFromTemplate(menuTemplate);
  tray.setContextMenu(contextMenu);

  // Update icon if there are any deploys from either service
  const hasActiveDeploys = renderDeploys.length > 0 || vercelDeploys.length > 0;
  tray.setImage(path.join(__dirname, hasActiveDeploys ? 'assets/uploading.png' : 'assets/icon.png'));
}

// Keep track of latest deploys from both services
let latestRenderDeploys: any[] = [];
let latestVercelDeploys: any[] = [];

renderPoller.setCallback((deploys) => {
  latestRenderDeploys = deploys;
  updateTrayMenu(latestRenderDeploys, latestVercelDeploys);
});

vercelPoller.setCallback((deploys) => {
  latestVercelDeploys = deploys;
  updateTrayMenu(latestRenderDeploys, latestVercelDeploys);
});

// Start both pollers
renderPoller.start();
vercelPoller.start();

const createTray = (): void => {
  const iconPath = path.join(__dirname, 'assets/icon.png'); 
  tray = new Tray(iconPath);
  
  const contextMenu = Menu.buildFromTemplate([
    { label: '...', enabled: false }
  ]);
  
  tray.setToolTip('pzdeploys');
  tray.setContextMenu(contextMenu);
  tray.on('click', () => {
    tray?.popUpContextMenu();
  });
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools({ mode: 'detach' });
};

ipcMain.handle('store-credentials', async (event, data) => {
  const { renderApiPassword, vercelApiKey, vercelTeamId } = data;
  try {
    // Store the Render.com API password securely
    await keytar.setPassword('pzdeploys', 'renderApiPassword', renderApiPassword);
    // Store the Vercel API key securely
    await keytar.setPassword('pzdeploys', 'vercelApiKey', vercelApiKey);
    // Store the Vercel team ID
    await keytar.setPassword('pzdeploys', 'vercelTeamId', vercelTeamId);

    return { success: true };
  } catch (error) {
    console.error('Error storing credentials:', error);
    throw error;
  }
});

ipcMain.handle('get-credentials', async () => {
  // Retrieve the credentials from secure storage
  const renderApiPassword = await keytar.getPassword('pzdeploys', 'renderApiPassword');
  const vercelApiKey = await keytar.getPassword('pzdeploys', 'vercelApiKey');
  const vercelTeamId = await keytar.getPassword('pzdeploys', 'vercelTeamId');
  return { renderApiPassword, vercelApiKey, vercelTeamId };
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createTray();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
