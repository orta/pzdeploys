import { app, BrowserWindow, ipcMain, Tray, Menu } from 'electron';
import keytar from 'keytar';
import path from 'path';
import { RenderPoller } from './renderPoller';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let tray: Tray | null = null;

const renderPoller = new RenderPoller();
renderPoller.setCallback((deploys) => {
  if (!tray) return;

  const menuTemplate: Electron.MenuItemConstructorOptions[] = deploys.length === 0 
    ? [{ label: 'No active deploys', enabled: false }]
    : deploys.map(deploy => ({
        label: `Deploy ${deploy.id}`,
        submenu: [
          { 
            label: 'View Details',
            click: () => {
              // TODO: Add URL when we have it
              // shell.openExternal(deploy.url)
            }
          }
        ]
      }));

  // Add a separator and quit option at the bottom
  menuTemplate.push(
    { type: 'separator' },
    { label: 'Quit', click: () => app.quit() }
  );

  const contextMenu = Menu.buildFromTemplate(menuTemplate);
  tray.setContextMenu(contextMenu);
});
renderPoller.start();

const createTray = (): void => {
  const iconPath = path.join(__dirname, 'assets/icon.png'); 
  tray = new Tray(iconPath);
  
  const contextMenu = Menu.buildFromTemplate([
    { label: '...', enabled: false }
  ]);
  
  tray.setToolTip('pzdeploys');
  tray.setContextMenu(contextMenu);
  // Optional: when clicking the tray icon, show the context menu.
  tray.on('click', () => {
    tray?.popUpContextMenu();
  });
};

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

ipcMain.handle('store-credentials', async (event, data) => {
  const { renderApiPassword, vercelApiKey } = data;
  try {
    // Store the Render.com API password securely
    await keytar.setPassword('pzdeploys', 'renderApiPassword', renderApiPassword);
    // Store the Vercel API key securely
    await keytar.setPassword('pzdeploys', 'vercelApiKey', vercelApiKey);
    return { success: true };
  } catch (error) {
    console.error('Error storing credentials:', error);
    throw error;
  }
});

ipcMain.handle('get-credentials', async () => {
  // Retrieve the credentials from secure storage
  const renderApiPassword = await keytar.getPassword('pzdeploys', 'renderApiPassword');
  const vercelApiKey = await keytar.getPassword('pzdeploys', 'vercelApiKey');
  return { renderApiPassword, vercelApiKey };
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  createTray();
  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
